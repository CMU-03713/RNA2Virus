configfile: "../config.yaml"

rule filter_reads:
    input:
        "../data/{sample}.fastq"
    output:
        "../{sample}/trimmed_fastq/single_end_trimmed.fastq"
    threads:
        config["threads"]
    shell:
        "java -jar ../src/Trimmomatic-0.39/trimmomatic-0.39.jar SE -threads {threads} -trimlog trim.log {input} {output} SLIDINGWINDOW:5:20 LEADING:3 TRAILING:3 MINLEN:36"

	
rule quality_report:
    input:
        "../{sample}/trimmed_fastq/single_end_trimmed.fastq"
    output:
        zip="../{sample}/fastqc_report/single_end_trimmed_fastqc.zip",
        html="../{sample}/fastqc_report/single_end_trimmed_fastqc.html"

    run:
        commands = [
            "chmod +x ../src/FastQC/fastqc",
            "../src/FastQC/fastqc {input}",
            "mv ../{wildcards.sample}/trimmed_fastq/*fastqc* ../{wildcards.sample}/fastqc_report/"
        ]
        for c in commands:
            shell(c)


rule align:
    input:
        fq1 = "../{sample}/trimmed_fastq/single_end_trimmed.fastq"#data/{sample}.fastq
    output:
        "../{sample}/star_aligned/Aligned.out.sam"
    log:
        "../{sample}/star_aligned/star_alignment.log"
    params:
        index=config["genomeDir"], #user/index
        extra="--outSAMunmapped Within"
    threads:
        config["threads"]
    wrapper:
        "0.72.0/bio/star/align"
# wrapper reference: https://snakemake-wrappers.readthedocs.io/en/stable/wrappers/star/align.html


rule unmapped_bam:
    input:
        "../{sample}/star_aligned/Aligned.out.sam"
    output:
        "../{sample}/star_unmapped/align_unmapped.bam"
    conda:
        "../envs/unmapped.yaml"
    params:
        sra = "{sample}"
    shell:
        "samtools view -f 4 {input} > {output}"


rule bam_to_fq:
    input:
        "../{sample}/star_unmapped/align_unmapped.bam"
    output:
        "../{sample}/star_unmapped/align_unmapped.fq"
    params:
        sra = "{sample}"
    conda:
        "../envs/unmapped.yaml"
    shell:
        "bedtools bamtofastq -i {input} -fq {output}"

rule unmapped_assembly:
    input:
        "../{sample}/star_unmapped/align_unmapped.fq"
    output:
        directory("../{sample}/assembled_contigs")
    threads:
        config["threads"]
    run:
        commands=[
        "../src/MEGAHIT-1.2.9-Linux-x86_64-static/bin/megahit -r {input} -o {output} -t {threads}"
                ]
        for c in commands:
            shell(c)

rule blastn:
    input:
        "../{sample}/assembled_contigs/final.contigs.fa"
    output:
        "../{sample}/blast_result/blast_out.txt"
    threads:
        config["threads"]
    conda:
        "../envs/unmapped.yaml"
    shell:
        "blastn -query {input} -db ref_viruses_rep_genomes -out {output} -num_threads {threads} -word_size 11 -max_target_seqs 10"

rule orfFinder:
    input:
        "../{sample}/assembled_contigs/final.contigs.fa"
    output:
        "../{sample}/ORFfinder/contigsWithOrf.fa"
    shell:
        "../src/ORFfinder -in {input} -s 1 -out {output}"

rule orfipy:
    input:
        "../{sample}/assembled_contigs/final.contigs.fa"
    output:
        directory("../{sample}/ORFfinder")
    threads:
        config["threads"]
    shell:
        "orfipy {input} --dna contigsWithOrf.fa --outdir ../{wildcards.sample}/ORFfinder --procs {threads}"

	
rule RNAfold:
    input:
        "../{sample}/assembled_contigs/final.contigs.fa"
    output:
        "../{sample}/RNAfold_output/secondary_structure.str"
    shell:
        "../src/ViennaRNA-2.4.17/src/bin/RNAfold <{input} >{output}"
